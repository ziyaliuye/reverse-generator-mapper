<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- Spring希望管理所有的业务逻辑组件-->
    <context:component-scan base-package="cn.cnm">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入数据库的配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- Spring用来控制业务逻辑。数据源、连接池、事务控制、aop -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- spring事务管理 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

    <!--
        整合mybatis目的：
            让spring来管理MyBatis的所有组件, mapper的实现类。
            spring用来管理事务（spring声明式事务）
    -->
    <!--创建出SqlSessionFactory对象， 这是MyBatis整合Spring的包的提供的 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 绑定数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- configLocation：指定全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config-spring.xml"></property>
        <!--mapperLocations: 指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:cn/cnm/mapper/*.xml"></property>
    </bean>

    <!--配置一个可以进行批量执行的sqlSession -->
    <bean id="batchSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入； -->
    <!-- base-package：指定mapper接口的包名 -->
    <!-- 切记使用通用Mapper时， 不要和通用Mapper的配置重复了， 不然会报错 -->
    <!--<mybatis-spring:scan base-package="cn.cnm.mapper"/>-->
    <!--
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.atguigu.mybatis.dao"></property>
    </bean>
    -->

    <!-- 通用Mapper配置主类， MyBatis原生的配置类也叫MapperScannerConfigurer， 就是前面的org改为了tk -->
    <!--<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--&lt;!&ndash; 指定Mapper所在的包 &ndash;&gt;-->
    <!--<property name="basePackage" value="cn.cnm.mapper"/>-->
    <!--<property name="properties">-->
    <!--<value>-->
    <!--mappers=tk.mybatis.mapper.common.Mapper-->
    <!--</value>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- 通用Mapper的各项属性通过 properties 属性进行配置，如果默认配置就是一行 -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="cn.cnm.mapper"/>
    </bean>

</beans>